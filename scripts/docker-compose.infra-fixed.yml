services:
  # ZOOKEEPER
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: ratp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - ratp-network
    restart: unless-stopped

  # KAFKA CLUSTER (2 BROKERS)
  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-1
    container_name: ratp-kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 19092
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka1-data:/var/lib/kafka/data
    networks:
      - ratp-network
    restart: unless-stopped

  kafka-2:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-2
    container_name: ratp-kafka-2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 19093
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka2-data:/var/lib/kafka/data
    networks:
      - ratp-network
    restart: unless-stopped

  # CONTROL CENTER
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: ratp-control-center
    depends_on:
      - kafka-1
      - kafka-2
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-1:29092,kafka-2:29093'
      CONTROL_CENTER_CLUSTER_ID: 'ratp-cluster'
      CONTROL_CENTER_REPLICATION_FACTOR: 2
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 2
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: ""
      PORT: 9021
    volumes:
      - control-center-data:/var/lib/confluent-control-center
    networks:
      - ratp-network
    restart: unless-stopped

  # DATA LAKE STORAGE
  minio:
    image: minio/minio:RELEASE.2024-06-29T01-20-47Z
    container_name: ratp-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - ratp-network
    restart: unless-stopped

  # MINIO SETUP AVEC STRUCTURE COMPL√àTE
  minio-setup:
    image: minio/mc:latest
    container_name: ratp-minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 10;
        /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
        
        echo 'üì¶ Cr√©ation des buckets principaux...';
        /usr/bin/mc mb myminio/ratp-raw --ignore-existing;
        /usr/bin/mc mb myminio/ratp-curated --ignore-existing;
        /usr/bin/mc mb myminio/ratp-gold --ignore-existing;
        
        echo 'üìÅ Structure weather/streaming...';
        /usr/bin/mc mb myminio/ratp-raw/weather --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/weather/streaming --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/weather/batches --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/weather/summaries --ignore-existing;
        
        echo 'üìä Structure data/original...';
        /usr/bin/mc mb myminio/ratp-raw/data --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/data/original --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/data/json --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/data/metadata --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/data/statistics --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/data/chunks --ignore-existing;
        
        echo 'üìã Structure batch/trafic et streaming/meteo...';
        /usr/bin/mc mb myminio/ratp-raw/batch --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/batch/pm10 --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/batch/trafic --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/streaming --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/streaming/meteo --ignore-existing;
        
        echo 'üìà Structure ingestion/reports...';
        /usr/bin/mc mb myminio/ratp-raw/ingestion --ignore-existing;
        /usr/bin/mc mb myminio/ratp-raw/ingestion/reports --ignore-existing;
        
        echo '‚úÖ Structure MinIO compl√®te cr√©√©e avec succ√®s!';
        "
    networks:
      - ratp-network

  # SPARK CLUSTER (2 WORKERS) - VOLUMES CORRIG√âS
  spark-master:
    image: bitnami/spark:3.5.1
    container_name: ratp-spark-master
    ports:
      - "8082:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./data:/opt/spark-data
      - spark-logs:/opt/spark/logs
      - spark-apps:/opt/spark/work
    networks:
      - ratp-network
    restart: unless-stopped

  spark-worker-1:
    image: bitnami/spark:3.5.1
    container_name: ratp-spark-worker-1
    ports:
      - "8083:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=3G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./data:/opt/spark-data
      - spark-logs:/opt/spark/logs
    networks:
      - ratp-network
    depends_on:
      - spark-master
    restart: unless-stopped

  spark-worker-2:
    image: bitnami/spark:3.5.1
    container_name: ratp-spark-worker-2
    ports:
      - "8084:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=3G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./data:/opt/spark-data
      - spark-logs:/opt/spark/logs
    networks:
      - ratp-network
    depends_on:
      - spark-master
    restart: unless-stopped

# VOLUMES PERSISTANTS (TOUS D√âFINIS)
volumes:
  zookeeper-data:
    driver: local
  kafka1-data:
    driver: local
  kafka2-data:
    driver: local
  control-center-data:
    driver: local
  minio-data:
    driver: local
  spark-logs:
    driver: local
  spark-apps:
    driver: local

# NETWORK
networks:
  ratp-network:
    external: true
    name: ratp-network